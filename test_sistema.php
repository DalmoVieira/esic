<?php
/**
 * Teste Abrangente do Sistema E-SIC
 * Valida√ß√£o final de todas as funcionalidades
 */

echo "=== TESTE FINAL DO SISTEMA E-SIC ===" . PHP_EOL . PHP_EOL;

// =======================================================
// 1. ESTRUTURA DO PROJETO
// =======================================================
echo "1. VERIFICA√á√ÉO DA ESTRUTURA:" . PHP_EOL;

$requiredDirs = [
    'app/controllers' => 'Controllers da aplica√ß√£o',
    'app/models' => 'Modelos de dados',
    'app/views' => 'Templates de visualiza√ß√£o',
    'app/config' => 'Configura√ß√µes do sistema',
    'app/middleware' => 'Middlewares de autentica√ß√£o',
    'app/libraries' => 'Bibliotecas personalizadas',
    'public' => 'Arquivos p√∫blicos',
    'database' => 'Scripts de banco de dados',
    'uploads' => 'Diret√≥rio de uploads',
    'logs' => 'Logs do sistema',
    'tmp' => 'Arquivos tempor√°rios'
];

$allDirsExist = true;
foreach ($requiredDirs as $dir => $desc) {
    if (is_dir($dir)) {
        echo "   ‚úì {$dir}/ - {$desc}" . PHP_EOL;
    } else {
        echo "   ‚úó {$dir}/ - FALTANDO: {$desc}" . PHP_EOL;
        $allDirsExist = false;
    }
}

echo "   Estrutura: " . ($allDirsExist ? "‚úì COMPLETA" : "‚úó INCOMPLETA") . PHP_EOL . PHP_EOL;

// =======================================================
// 2. ARQUIVOS ESSENCIAIS
// =======================================================
echo "2. ARQUIVOS ESSENCIAIS:" . PHP_EOL;

$requiredFiles = [
    'public/index.php' => 'Front controller e sistema de rotas',
    'app/config/Database.php' => 'Configura√ß√£o do banco de dados',
    'app/config/Auth.php' => 'Sistema de autentica√ß√£o',
    'app/config/OAuthHandler.php' => 'Handler OAuth para Google/Gov.br',
    'app/middleware/AuthMiddleware.php' => 'Middleware de autentica√ß√£o',
    'app/libraries/EmailService.php' => 'Servi√ßo de envio de emails',
    'database/schema.sql' => 'Schema do banco de dados',
    '.env.example' => 'Exemplo de configura√ß√µes',
    '.env' => 'Configura√ß√µes de ambiente',
    'composer.json' => 'Depend√™ncias do projeto',
    'README.md' => 'Documenta√ß√£o do projeto'
];

$allFilesExist = true;
foreach ($requiredFiles as $file => $desc) {
    if (file_exists($file)) {
        echo "   ‚úì {$file} - {$desc}" . PHP_EOL;
    } else {
        echo "   ‚úó {$file} - FALTANDO: {$desc}" . PHP_EOL;
        $allFilesExist = false;
    }
}

echo "   Arquivos: " . ($allFilesExist ? "‚úì COMPLETOS" : "‚úó INCOMPLETOS") . PHP_EOL . PHP_EOL;

// =======================================================
// 3. CARREGAMENTO DE CLASSES
// =======================================================
echo "3. CLASSES DO SISTEMA:" . PHP_EOL;

require_once 'app/config/Database.php';
require_once 'app/config/Auth.php';
require_once 'app/config/OAuthHandler.php';
require_once 'app/middleware/AuthMiddleware.php';
require_once 'app/libraries/EmailService.php';

$classes = [
    'Database' => 'Conex√£o com banco de dados',
    'Auth' => 'Sistema de autentica√ß√£o',
    'OAuthHandler' => 'Handler OAuth',
    'AuthMiddleware' => 'Middleware de autentica√ß√£o',
    'EmailService' => 'Servi√ßo de email'
];

$allClassesLoaded = true;
foreach ($classes as $class => $desc) {
    if (class_exists($class)) {
        echo "   ‚úì {$class} - {$desc}" . PHP_EOL;
    } else {
        echo "   ‚úó {$class} - FALHA: {$desc}" . PHP_EOL;
        $allClassesLoaded = false;
    }
}

echo "   Classes: " . ($allClassesLoaded ? "‚úì CARREGADAS" : "‚úó FALHAS NO CARREGAMENTO") . PHP_EOL . PHP_EOL;

// =======================================================
// 4. CONEX√ÉO COM BANCO DE DADOS
// =======================================================
echo "4. BANCO DE DADOS:" . PHP_EOL;

try {
    $db = Database::getInstance();
    $connection = $db->getConnection();
    echo "   ‚úì Conex√£o estabelecida com sucesso" . PHP_EOL;
    
    // Testar query b√°sica
    $result = $db->selectOne('SELECT VERSION() as version, DATABASE() as database_name');
    echo "   ‚úì MySQL/MariaDB: " . $result['version'] . PHP_EOL;
    echo "   ‚úì Database: " . $result['database_name'] . PHP_EOL;
    
    // Verificar tabelas principais
    $tables = ['usuarios', 'pedidos', 'recursos', 'configuracoes'];
    $tablesExist = true;
    
    foreach ($tables as $table) {
        $exists = $db->select("SHOW TABLES LIKE '$table'");
        if (!empty($exists)) {
            echo "   ‚úì Tabela '$table' existe" . PHP_EOL;
        } else {
            echo "   ‚úó Tabela '$table' n√£o existe" . PHP_EOL;
            $tablesExist = false;
        }
    }
    
    echo "   Banco de dados: " . ($tablesExist ? "‚úì CONFIGURADO" : "‚úó TABELAS FALTANDO") . PHP_EOL;
    
} catch (Exception $e) {
    echo "   ‚úó Erro na conex√£o: " . $e->getMessage() . PHP_EOL;
    echo "   Banco de dados: ‚úó FALHA" . PHP_EOL;
}

echo PHP_EOL;

// =======================================================
// 5. EXTENS√ïES PHP
// =======================================================
echo "5. EXTENS√ïES PHP REQUERIDAS:" . PHP_EOL;

$required_extensions = [
    'pdo' => 'Acesso ao banco de dados',
    'pdo_mysql' => 'Driver MySQL para PDO', 
    'mbstring' => 'Manipula√ß√£o de strings multibyte',
    'openssl' => 'Criptografia e HTTPS',
    'curl' => 'Requisi√ß√µes HTTP (OAuth)',
    'json' => 'Manipula√ß√£o JSON',
    'fileinfo' => 'Informa√ß√µes de arquivos',
    'session' => 'Gerenciamento de sess√µes',
    'filter' => 'Filtros e valida√ß√£o',
    'hash' => 'Fun√ß√µes de hash'
];

$allExtensionsLoaded = true;
foreach ($required_extensions as $ext => $desc) {
    if (extension_loaded($ext)) {
        echo "   ‚úì {$ext} - {$desc}" . PHP_EOL;
    } else {
        echo "   ‚úó {$ext} - FALTANDO: {$desc}" . PHP_EOL;
        $allExtensionsLoaded = false;
    }
}

echo "   Extens√µes: " . ($allExtensionsLoaded ? "‚úì COMPLETAS" : "‚úó EXTENS√ïES FALTANDO") . PHP_EOL . PHP_EOL;

// =======================================================
// 6. CONFIGURA√á√ïES DE SEGURAN√áA
// =======================================================
echo "6. CONFIGURA√á√ïES DE SEGURAN√áA:" . PHP_EOL;

// Verificar configura√ß√µes b√°sicas de seguran√ßa
$securityChecks = [];

// Session security
$sessionConfig = [
    'session.cookie_httponly' => ini_get('session.cookie_httponly'),
    'session.cookie_secure' => ini_get('session.cookie_secure'),
    'session.use_strict_mode' => ini_get('session.use_strict_mode')
];

foreach ($sessionConfig as $setting => $value) {
    $status = $value ? "‚úì" : "‚úó";
    echo "   {$status} {$setting}: " . ($value ? 'ON' : 'OFF') . PHP_EOL;
    $securityChecks[] = (bool)$value;
}

// File upload settings
$uploadMaxSize = ini_get('upload_max_filesize');
$postMaxSize = ini_get('post_max_size');
echo "   ‚úì upload_max_filesize: {$uploadMaxSize}" . PHP_EOL;
echo "   ‚úì post_max_size: {$postMaxSize}" . PHP_EOL;

// Directory permissions
$dirs = ['uploads', 'logs', 'tmp'];
foreach ($dirs as $dir) {
    if (is_dir($dir) && is_writable($dir)) {
        echo "   ‚úì Diret√≥rio {$dir}/ √© grav√°vel" . PHP_EOL;
    } else {
        echo "   ‚úó Diret√≥rio {$dir}/ n√£o √© grav√°vel" . PHP_EOL;
        $securityChecks[] = false;
    }
}

echo PHP_EOL;

// =======================================================
// 7. CONTROLLERS E MODELOS
// =======================================================
echo "7. CONTROLLERS E MODELOS:" . PHP_EOL;

// Verificar controllers principais
$controllers = [
    'HomeController',
    'PedidoController',
    'RecursoController', 
    'AdminController',
    'AuthController',
    'ApiController'
];

foreach ($controllers as $controller) {
    $file = "app/controllers/{$controller}.php";
    if (file_exists($file)) {
        require_once $file;
        if (class_exists($controller)) {
            echo "   ‚úì {$controller}" . PHP_EOL;
        } else {
            echo "   ‚úó {$controller} - classe n√£o definida" . PHP_EOL;
        }
    } else {
        echo "   ‚úó {$controller} - arquivo n√£o existe" . PHP_EOL;
    }
}

// Verificar modelos principais
$models = ['Usuario', 'Pedido', 'Recurso', 'AuthLog'];
foreach ($models as $model) {
    $file = "app/models/{$model}.php";
    if (file_exists($file)) {
        require_once $file;
        if (class_exists($model)) {
            echo "   ‚úì Model {$model}" . PHP_EOL;
        } else {
            echo "   ‚úó Model {$model} - classe n√£o definida" . PHP_EOL;
        }
    } else {
        echo "   ‚úó Model {$model} - arquivo n√£o existe" . PHP_EOL;
    }
}

echo PHP_EOL;

// =======================================================
// 8. RESUMO FINAL
// =======================================================
echo "=== RESUMO FINAL ===" . PHP_EOL;

$overallStatus = $allDirsExist && $allFilesExist && $allClassesLoaded && $allExtensionsLoaded;

echo "Estrutura do Projeto: " . ($allDirsExist ? "‚úì OK" : "‚úó PROBLEMAS") . PHP_EOL;
echo "Arquivos Essenciais: " . ($allFilesExist ? "‚úì OK" : "‚úó PROBLEMAS") . PHP_EOL;
echo "Classes do Sistema: " . ($allClassesLoaded ? "‚úì OK" : "‚úó PROBLEMAS") . PHP_EOL;
echo "Extens√µes PHP: " . ($allExtensionsLoaded ? "‚úì OK" : "‚úó PROBLEMAS") . PHP_EOL;

echo PHP_EOL;

if ($overallStatus) {
    echo "üéâ SISTEMA E-SIC: ‚úÖ PRONTO PARA USO!" . PHP_EOL;
    echo PHP_EOL;
    echo "Pr√≥ximos passos:" . PHP_EOL;
    echo "1. Acesse: http://localhost:8080" . PHP_EOL;
    echo "2. Login admin: admin@esic.gov.br (senha padr√£o no banco)" . PHP_EOL;
    echo "3. Configure as vari√°veis do arquivo .env conforme necess√°rio" . PHP_EOL;
    echo "4. Configure SMTP para envio de emails" . PHP_EOL;
    echo "5. Configure OAuth (Google/Gov.br) se necess√°rio" . PHP_EOL;
} else {
    echo "‚ö†Ô∏è  SISTEMA E-SIC: ‚ùå PROBLEMAS DETECTADOS" . PHP_EOL;
    echo "Verifique os itens marcados com ‚úó acima e corrija antes de usar em produ√ß√£o." . PHP_EOL;
}

echo PHP_EOL . "=== FIM DO TESTE ===" . PHP_EOL;